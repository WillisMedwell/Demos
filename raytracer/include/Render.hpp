#pragma once
#include "Math.hpp"
#include "Neural.hpp"
#include "Tools.hpp"

#include <algorithm>
#include <array>
#include <iterator>
#include <memory>
#include <ranges>
#include <utility>
#include <vector>

struct Camera {
    Math::LinearAlgebra::Pos<3, float> position;
    Math::LinearAlgebra::Mat<3, 3, float> rotation_matrix;
    Math::Radians fov;
    Camera()
    {
    }

    Camera(const Math::LinearAlgebra::Pos<3>& pos, Math::Radians yaw, Math::Radians pitch, Math::Radians roll, Math::Radians field_of_view)
        : position(pos)
        , rotation_matrix(Math::LinearAlgebra::getRotationMat3x3<float>(yaw, pitch, roll))
        , fov(field_of_view)
    {
    }

    bool operator==(const Camera& other) const
    {
        return this->position == other.position
            && this->rotation_matrix == other.rotation_matrix
            && this->fov == other.fov;
    }
    bool operator!=(const Camera& other) const
    {
        return !(*this == other);
    }
};

struct Rgb96;

struct Rgba {
    uint8_t r, g, b, a;

    explicit operator Rgb96() const;
};

struct Rgb96 {
    float r, g, b;
    explicit operator Rgba() const;

    Rgb96 operator+(Rgb96 other) const
    {
        Rgb96 cpy;
        cpy.r = r + other.r;
        cpy.g = g + other.g;
        cpy.b = b + other.b;
        return cpy;
    }
    Rgb96 operator/(float scalar) const
    {
        Rgb96 cpy = *this;
        cpy.r /= scalar;
        cpy.g /= scalar;
        cpy.b /= scalar;
        return cpy;
    }
    Rgb96 operator*(float scalar) const
    {
        Rgb96 cpy = *this;
        cpy.r *= scalar;
        cpy.g *= scalar;
        cpy.b *= scalar;
        return cpy;
    }
    Rgb96 operator*(Rgb96 other) const
    {
        Rgb96 cpy = *this;
        cpy.r *= other.r;
        cpy.g *= other.g;
        cpy.b *= other.b;
        return cpy;
    }
};

Rgba::operator Rgb96() const
{
    return Rgb96 {
        std::clamp(static_cast<float>(r / 255.0f), 0.0f, 1.0f),
        std::clamp(static_cast<float>(g / 255.0f), 0.0f, 1.0f),
        std::clamp(static_cast<float>(b / 255.0f), 0.0f, 1.0f)
    };
}

Rgb96::operator Rgba() const
{
    return Rgba(
        static_cast<uint8_t>(std::clamp(256 * std::clamp(r, 0.f, 0.9999f), 0.0f, 255.0f)),
        static_cast<uint8_t>(std::clamp(256 * std::clamp(g, 0.f, 0.9999f), 0.0f, 255.0f)),
        static_cast<uint8_t>(std::clamp(256 * std::clamp(b, 0.f, 0.9999f), 0.0f, 255.0f)),
        255);
}

struct Viewport {
    uint16_t width;
    uint16_t height;
    Rgba* image;
    Rgb96* data;
};

enum class MaterialType {
    metal,
    glass,
    lambert
};

struct Material {
    MaterialType material_type;
    Rgb96 albedo;
    float fuzz;
    float refractive_index;
};

struct Objects {
    std::vector<Math::LinearAlgebra::Sphere3D<float>> spheres;
    std::vector<Material> sphere_materials;
    // TODO
    // std::array<Math::LinearAlgebra::Triangle<float>, N> triangles;
};

auto getRandomVecUnitSphere() -> Math::LinearAlgebra::Vec<3, float>
{
    Math::LinearAlgebra::Vec<3, float> vec = {
        Tools::randomInRange(-1, 1),
        Tools::randomInRange(-1, 1),
        Tools::randomInRange(-1, 1)
    };
    while (vec.getLengthSquared() < 1) {
        vec = {
            Tools::randomInRange(-1, 1),
            Tools::randomInRange(-1, 1),
            Tools::randomInRange(-1, 1)
        };
    }
    return vec;
}

auto getCameraRay(float x, float y, Viewport viewport, const Camera& camera) -> Math::LinearAlgebra::Ray<3>
{
    // TODO apply blue noise for not so perfect render.
    float aspect_ratio = (float)viewport.width / (float)viewport.height;
    auto direction = Math::LinearAlgebra::Vec<3> {
        ((x / viewport.width - 0.5f) * aspect_ratio),
        ((0.5 - y / viewport.height)),
        0.5 / Math::tan(camera.fov.angle / 2)
    };
    direction = Math::LinearAlgebra::dotProduct(camera.rotation_matrix, direction);
    return Math::LinearAlgebra::Ray<3>(camera.position, direction);
}

template <size_t samples>
std::array<Math::LinearAlgebra::Ray<3, float>, samples> getRays(float x, float y, Viewport viewport, const Camera& camera, const float r = 0.45f)
{
    using namespace Math::LinearAlgebra;
    using namespace Tools;

    std::array<Ray<3, float>, samples> rays;
    float aspect_ratio = (float)viewport.width / (float)viewport.height;

    for (size_t i = 0; i < samples; i++) {
        auto direction = Vec<3> {
            (((x + randomInRange(-r, r)) / viewport.width - 0.5f) * aspect_ratio),
            ((0.5 - (y + randomInRange(-r, r)) / viewport.height)),
            0.5 / tan(camera.fov.angle / 2)
        };
        direction = dotProduct(direction, camera.rotation_matrix);
        rays[i] = Ray<3>(camera.position, direction);
    }
    return rays;
}

auto getColour(const Math::LinearAlgebra::Ray<3>& ray, const Objects& objects, int depth) -> Rgb96
{
    if (depth <= 0) {
        return { 0, 0, 0 };
    }

    const Math::LinearAlgebra::Sphere3D<float>* closet_sphere = nullptr;
    float closet_dist = std::numeric_limits<float>::max();
    float closet_abs_dist = std::numeric_limits<float>::max();

    for (const auto& sphere : objects.spheres) {
        float dist = Math::LinearAlgebra::intersectionDist(ray, sphere);
        if (dist != 0 && std::abs(dist) < closet_abs_dist) {
            closet_dist = dist;
            closet_abs_dist = std::abs(dist);
            closet_sphere = &sphere;
        }
    }

    bool has_hit = closet_sphere != nullptr;

    if (!has_hit) {
        auto unit_direction = ray.getDirection();
        float t = 0.5f * (unit_direction[1] + 1.0f);
        return Rgb96 { .9f, 0.9f, 1.f } * (1.0f - t) + Rgb96 { 0.4f, 0.6f, 1.0f } * t;
    }

    const auto closet_index = std::distance(objects.spheres.data(), closet_sphere);
    const auto hit_point = ray.getPointAlongRay(closet_dist);
    const auto hit_shape_normal = Math::LinearAlgebra::getNormalVec<float>(hit_point, *closet_sphere);
    const Material& hit_material = objects.sphere_materials.at((size_t)closet_index);

    const bool has_hit_front_face = Math::LinearAlgebra::dotProduct(ray.getDirection(), hit_shape_normal) < 0;
    const auto hit_normal = has_hit_front_face ? hit_shape_normal : -hit_shape_normal;

    Rgb96 attenuated_colour = hit_material.albedo;
    Math::LinearAlgebra::Ray<3> scattered_ray;

    switch (hit_material.material_type) {
    case MaterialType::lambert:
        scattered_ray = Math::LinearAlgebra::Ray<3> {
            hit_point,
            hit_shape_normal + getRandomVecUnitSphere()
        };
        break;
    case MaterialType::metal:
        scattered_ray = Math::LinearAlgebra::Ray<3> {
            hit_point,
            Math::LinearAlgebra::getReflected(ray.getDirection(), hit_shape_normal) + (getRandomVecUnitSphere() * hit_material.fuzz)
        };
        break;
    case MaterialType::glass:
        auto reflectance = [](auto cosine, auto refractive_index) {
            auto r0 = (1 - refractive_index) / (1 + refractive_index);
            r0 *= r0;
            return r0 + (1 - r0) * std::pow((1 - cosine), 5);
        };

        attenuated_colour = Rgb96 { 1.f, 1.f, 1.f };
        float refraction_ratio = has_hit_front_face ? 1.0f / hit_material.refractive_index : hit_material.refractive_index;
        float cos_theta = std::min(Math::LinearAlgebra::dotProduct(-ray.getDirection(), hit_normal), 1.0f);
        float sin_theta = Math::sqrt<float>(1.0f - (cos_theta * cos_theta));

        bool cannot_refract = refraction_ratio * sin_theta > 1.0f;
        Math::LinearAlgebra::Vec<3> scatter_direction;

        if (cannot_refract || reflectance(cos_theta, refraction_ratio) > Tools::randomInRange(0, .99999)) {
            scatter_direction = Math::LinearAlgebra::getReflected(ray.getDirection(), hit_normal);
        } else {
            scatter_direction = Math::LinearAlgebra::getRefracted(ray.getDirection(), hit_normal, refraction_ratio);
        }
        scattered_ray = Math::LinearAlgebra::Ray<3> {
            hit_point,
            scatter_direction
        };
        break;
    }
    return attenuated_colour * getColour(scattered_ray, objects, --depth);
}

NeuralNetwork network {
    NeuralLayer<35, 35, Math::Activation::Sigmoid>({ { { 0.277296f, -0.269394f, -0.0105016f, 0.134531f, 0.0788209f, 0.00504362f, -0.105553f, 0.0538449f, 0.166673f, 0.280636f, -0.198849f, -0.250356f, 0.00119324f, 0.00790214f, 0.162667f, 0.126488f, 0.118701f, 0.114008f, 0.247963f, -0.219307f, 0.01805f, -0.166313f, -0.397497f, 0.136691f, 0.0368398f, -0.120997f, -0.139757f, -0.0392715f, -0.164734f, -0.214483f, 0.0388435f, -0.263273f, 0.130001f, 0.00904795f, 0.135222f }, 1.69976e-07f }, { { -0.321568f, -0.0751826f, -0.0455713f, 0.0155448f, 0.0381705f, -0.0950695f, -0.115628f, -0.284291f, -0.3445f, -0.141175f, 0.118376f, 0.344897f, 0.0934307f, 0.0967192f, -0.00517436f, 0.549166f, 0.0101297f, 0.00457367f, -0.0828349f, 0.0585003f, 0.433942f, -0.0056015f, 0.158395f, -0.0426613f, -0.161951f, 0.11093f, 0.112247f, -0.120082f, -0.0622298f, -0.157389f, 0.0770215f, 0.248945f, -0.170144f, -0.018696f, -0.0467291f }, 0.0 }, { { 0.2142f, 0.0177338f, -0.0934719f, -0.0850746f, 0.069942f, 0.0478217f, -0.00512285f, -0.108465f, 0.0460459f, -0.00547692f, -0.092636f, 0.0704683f, -0.0934654f, -0.180593f, -0.500753f, -0.088103f, -0.0231021f, -0.154529f, 0.0310653f, -0.00658604f, 0.111676f, -0.191763f, -0.035329f, -0.112203f, 0.0115514f, 0.203597f, -0.148754f, 0.350437f, 0.0689815f, 0.0173948f, -0.210086f, -0.0199879f, 0.0604015f, -0.162076f, 0.345134f }, 3.57436e-07f }, { { 0.234071f, 0.0176403f, -0.0719132f, 0.320283f, -0.00294828f, -0.0957018f, -0.256658f, -0.070959f, 0.355245f, 0.0199705f, -0.161789f, 0.170564f, -0.183692f, 0.189255f, -0.161256f, -0.280451f, -0.0269797f, 0.293081f, 0.0388102f, -0.0872429f, 0.11121f, 0.209468f, 0.132345f, 0.0930969f, 0.260482f, -0.300289f, -0.156263f, -0.0983309f, -0.183441f, -0.15659f, -0.243535f, -0.0838095f, -0.217025f, 0.0346652f, -0.31125f }, 0 }, { { 0.0970186f, -0.106896f, -0.0957677f, 0.0634483f, 0.102925f, 0.102654f, 0.105737f, -0.259712f, -0.0245828f, 0.0775154f, -0.0766299f, 0.0505727f, -0.248217f, 0.0186797f, 0.0342523f, -0.208001f, 0.251848f, 0.16351f, 0.00676292f, -0.0656753f, 0.0756944f, -0.0805481f, -0.215839f, 0.0637836f, 0.233442f, 0.0578281f, 0.412929f, -0.00261022f, -0.0886943f, 0.200227f, -0.102805f, 0.16567f, 0.112915f, 0.247998f, 0.00626846f }, -5.54948e-07f }, { { -0.14332f, -0.0135256f, -0.195845f, 0.0300881f, -0.141708f, -0.315878f, 0.0391396f, -0.00426142f, -0.081725f, 0.0164239f, -0.189292f, 0.0839268f, -0.00381759f, -0.0665075f, -0.0619554f, -0.166349f, 0.0829256f, -0.016123f, -0.10237f, -0.301727f, 0.35552f, -0.184971f, -0.0402912f, -0.0405809f, 0.0325151f, -0.110431f, 0.108595f, 0.024547f, 0.417738f, 0.474651f, -0.0725123f, 0.239737f, 0.00868591f, 0.179125f, -0.195514f }, 0 }, { { -0.119174f, 0.229217f, -0.0984098f, -0.00503655f, 0.217948f, 0.0179744f, -0.0229696f, 0.284886f, 0.0716849f, 0.10861f, 0.242162f, 0.0105018f, -0.281071f, -0.0275703f, -0.0162872f, -0.0811005f, 0.174521f, -0.128184f, 0.160535f, 0.0703322f, 0.0619133f, 0.0299924f, -0.21912f, 0.29682f, 0.100945f, 0.0473392f, -0.00732061f, 0.194425f, 0.271188f, -0.0420714f, 0.146424f, -0.0384585f, 0.210086f, -0.149452f, 0.297129f }, 2.46047e-06f }, { { 0.304205f, -0.00283649f, -0.176494f, -0.203391f, -0.0777139f, 0.112293f, 0.15834f, 0.0187869f, 0.00818187f, 0.317157f, -0.173222f, 0.115898f, -0.118584f, 0.0670881f, 0.298732f, -0.0467019f, 0.134273f, -0.0801584f, -0.023836f, 0.124546f, 0.0224554f, -0.101772f, -0.00323478f, -0.233761f, 0.283109f, 0.0449341f, 0.104134f, -0.0408561f, -0.0918302f, -0.123109f, 0.224471f, -0.0397412f, 0.0605471f, 0.288976f, -0.242941f }, 6.12194e-09f }, { { 0.160738f, -0.353232f, -0.186623f, -0.329426f, 0.093725f, 0.0668014f, -0.132365f, 0.208413f, 0.0624184f, -0.122484f, 0.114969f, -0.13482f, -0.0127193f, 0.0519386f, 0.116472f, 0.0675479f, 0.0204444f, -0.118405f, 0.0391867f, 0.0094063f, 0.0915521f, -0.142196f, 0.174162f, 0.0898049f, 0.0322472f, 0.0630542f, 0.21775f, -0.136073f, -0.0975945f, -0.0942726f, -0.0239843f, -0.0520163f, 0.215339f, -0.103284f, 0.117356f }, 0 }, { { 0.00489496f, -0.236907f, 0.22068f, 0.240432f, -0.0233716f, 0.186415f, 0.336012f, -0.149054f, -0.221032f, -0.0429019f, -0.0684093f, -0.11787f, 0.114681f, 0.0900166f, -0.16165f, 0.0314621f, 0.101983f, 0.178313f, -0.204107f, 0.00357785f, 0.131408f, 0.103293f, -0.207106f, -0.0463232f, -0.129759f, -0.0593855f, 0.113655f, -0.294138f, -0.00688763f, 0.226969f, 0.0743523f, 0.0708467f, -0.0651753f, -0.383795f, -0.129768f }, 0 }, { { 0.219041f, 0.321503f, -0.108027f, -0.0441404f, -0.202459f, 0.146928f, 0.0382419f, 0.037408f, 0.285703f, -0.106829f, 0.030375f, -0.0462832f, 0.239622f, -0.153012f, -0.148771f, 0.278788f, 0.296353f, 0.0226407f, 0.195979f, 0.312927f, -0.0180698f, 0.128659f, 0.0677261f, 0.197014f, -0.0958823f, -0.0279487f, 0.0836717f, -0.0793043f, -0.254121f, 0.326418f, -0.0189577f, -0.161559f, 0.136721f, 0.0407496f, -0.0707424f }, -1.13979e-06f }, { { -0.0305464f, -0.0330757f, 0.0540849f, 0.0550261f, 0.119165f, -0.0177974f, -0.0170764f, -0.111633f, -0.289509f, -0.134648f, 0.100642f, 0.0811448f, 0.0733991f, -0.0360834f, 0.0585323f, 0.178612f, 0.0108987f, -0.0418621f, 0.0756913f, -0.180937f, -0.314639f, 0.0880877f, -0.161466f, -0.0355931f, -0.00968264f, -0.277814f, -0.214736f, 0.478797f, -0.332945f, 0.122539f, -0.176443f, -0.222978f, 0.132088f, 0.217008f, -0.0882769f }, 0 }, { { 0.0104802f, -0.0924891f, -0.233269f, 0.147476f, 0.0911623f, 0.045224f, -0.0120385f, -0.367279f, -0.243729f, -0.212095f, -0.175405f, 0.207079f, 0.116141f, 0.123304f, -0.193072f, -0.210101f, 0.104039f, -0.112711f, 0.0628757f, -0.0408014f, 0.247688f, -0.129819f, 0.381753f, -0.0617762f, 0.0088476f, 0.0874784f, -0.0371668f, -0.12666f, 0.212876f, -0.0974649f, 0.030928f, 0.283971f, 0.0775152f, -0.136301f, -0.0383803f }, 7.97685e-08f }, { { 0.179738f, 0.117994f, 0.276617f, 0.306897f, 0.194627f, -0.0382034f, -0.0614312f, -0.188134f, -0.00658093f, 0.228296f, -0.198467f, -0.232891f, -0.231362f, 0.062381f, -0.0688989f, -0.0408187f, -0.347813f, -0.013353f, -9.38377e-05f, 0.0884684f, 0.0481793f, 0.220211f, 0.138778f, 0.145402f, 0.0569355f, 0.149032f, 0.0218023f, 0.070417f, -0.359993f, -0.0239826f, 0.0699505f, -0.111611f, 0.18868f, -0.0971249f, 0.069277f }, 0 }, { { 0.0779244f, 0.0615488f, 0.6235f, -0.0890414f, 0.218182f, 0.0404244f, -0.0105434f, -0.251617f, -0.139707f, -0.042334f, -0.0716214f, -0.0679859f, -0.13541f, -0.370923f, -0.180029f, -0.0915515f, -0.200231f, -0.192946f, -0.07219f, -0.0912269f, -0.0987984f, 0.00253064f, 0.0564095f, -0.00785039f, 0.0160976f, -0.0982482f, -0.323824f, 0.0933889f, -0.214583f, -0.140455f, -0.212502f, -0.324614f, -0.113798f, -0.178575f, 0.139824f }, 0 }, { { -0.120342f, 0.0932381f, -0.193806f, -0.180529f, 0.139783f, -0.122042f, 0.180758f, 0.0623894f, 0.0243316f, -0.0543608f, 0.344206f, -0.140439f, 0.0647309f, 0.170309f, -0.121908f, -0.057855f, 0.284217f, 0.136474f, -0.0926295f, -0.252448f, -0.343909f, -0.173311f, -0.104045f, 0.0145941f, -0.12753f, 0.0218188f, -0.286318f, -0.346402f, 0.537095f, -0.106887f, 0.477538f, -0.186934f, -0.194058f, 0.00161797f, 0.0702003f }, 0 }, { { 0.0436018f, -0.309239f, 0.141105f, 0.260461f, 0.191877f, 0.102469f, 0.0462566f, -0.174176f, 0.433601f, -0.338396f, -0.23929f, 0.330672f, 0.15623f, 0.106573f, 0.204543f, 0.0899242f, -0.199605f, -0.139273f, 0.0818508f, -0.369857f, -0.12755f, 0.0683769f, 0.133786f, 0.0863098f, 0.142291f, -0.168866f, 0.00896905f, -0.218448f, 0.025966f, 0.141072f, -0.232027f, 0.122195f, 0.0965189f, -0.0340758f, 0.237508f }, 0 }, { { -0.118118f, 0.184185f, 0.0657158f, -0.134196f, 0.113977f, -0.0174126f, -0.0832049f, 0.261194f, 0.140167f, 0.061048f, 0.271679f, 0.178566f, 0.202188f, -0.149468f, 0.0539747f, 0.0490583f, -0.176504f, 0.155664f, 0.0990199f, 0.0795536f, -0.251618f, -0.130397f, -0.159735f, -0.145941f, -0.0704292f, 0.0171575f, -0.0497835f, 0.0173802f, -0.00149014f, 0.0547805f, -0.297396f, -0.081168f, 0.27039f, -0.0183892f, -0.0194591f }, -4.35233e-06f }, { { -0.0325867f, 0.19324f, 0.017194f, 0.210806f, 0.246995f, -0.0427735f, 0.0241403f, -0.0436297f, -0.250046f, -0.142528f, 0.260459f, 0.161362f, 0.228091f, -0.152318f, 0.148259f, 0.228727f, -0.00187478f, 0.0633421f, -0.272407f, -0.0826043f, 0.0968818f, -0.00312853f, -0.184714f, -0.0349339f, -0.119967f, -0.161089f, 0.0443831f, 0.0283274f, -0.101442f, 0.0815149f, -0.077825f, 0.0936268f, 0.186563f, -0.058248f, 0.0889755f }, 0 }, { { 0.0653315f, -0.280666f, -0.0272172f, 0.0955324f, 0.0282236f, 0.0423375f, -0.000852195f, 0.0679252f, 0.238068f, 0.0967749f, -0.0224609f, -0.322773f, -0.256238f, 0.122469f, -0.254475f, -0.152622f, 0.572514f, 0.0337222f, -0.124976f, -0.0639794f, 0.199338f, -0.228106f, -0.151474f, 0.0429152f, 0.280773f, -0.169995f, 0.0562194f, -0.123949f, -0.138465f, 0.165388f, 0.158289f, -0.135162f, 0.00174726f, -0.141942f, -0.0919526f }, -3.26166e-06f }, { { -0.359377f, -0.0761785f, -0.171445f, 0.144886f, -0.353501f, -0.13123f, -0.110549f, 0.035561f, 0.107902f, -0.263418f, 0.386374f, -0.105136f, 0.0637126f, 0.0386448f, -0.00018137f, -0.117925f, -0.204086f, -0.0247451f, 0.266688f, -0.105796f, -0.093007f, 0.0451585f, 0.193334f, 0.464616f, -0.0218274f, 0.066718f, -0.0971829f, -0.224079f, -0.0239461f, 0.190832f, 0.150103f, 0.095357f, 0.10501f, -0.270523f, -0.172291f }, 5.70794e-07f }, { { -0.175066f, 0.192679f, 0.114058f, -0.194866f, 0.0967255f, -0.0565975f, -0.152336f, -0.117661f, -0.139823f, -0.116576f, 0.0220255f, 0.324621f, -0.349078f, -0.015441f, -0.0503493f, -0.0311415f, -0.0280106f, -0.121566f, 0.0857902f, 0.0379019f, 0.193615f, 0.0965908f, 0.0367737f, 0.248679f, 0.257797f, -0.0572317f, 0.185232f, 0.0705282f, -0.435885f, -0.0772952f, 0.156101f, -0.0971444f, -0.175462f, 0.0597935f, -0.187727f }, 6.37926e-07f }, { { 0.0598291f, 0.0263871f, -0.340418f, -0.154191f, -0.169766f, -0.250549f, 0.0101199f, -0.163267f, 0.0685157f, -0.178825f, 0.274567f, 0.0303689f, -0.0556008f, -0.156059f, -0.58289f, 0.00430032f, 0.168021f, -0.0504562f, 0.101488f, 0.223f, -0.20045f, -0.0473404f, -0.107478f, -0.0732778f, -0.137791f, 0.392308f, 0.0793814f, 0.166782f, 0.190202f, -0.0817188f, 0.264754f, 0.211642f, 0.0909105f, 0.0936375f, -0.188683f }, 0 }, { { -0.0596972f, -0.00153326f, 0.0713632f, -0.0407592f, -0.116704f, 0.0934912f, 0.00800805f, 0.128567f, 0.0796512f, 0.0918396f, 0.100639f, -0.113334f, 0.197508f, 0.124849f, -0.203065f, 0.123602f, 0.0607863f, -0.0156351f, 0.19427f, -0.0189133f, -0.00722805f, 0.0195627f, -0.209561f, 0.00608977f, -0.138509f, -0.147062f, 0.119057f, 0.0432766f, -0.056873f, -0.217909f, -0.0397312f, 0.138218f, 0.164641f, -0.0905415f, 0.243317f }, -2.24127e-06f }, { { -0.394993f, -0.146076f, 0.0297178f, 0.0621038f, 0.0865712f, 0.117686f, 0.223871f, 0.101479f, 0.229896f, -0.200459f, -0.00783287f, 0.0964161f, 0.105415f, 0.0908952f, -0.0878142f, 0.096086f, 0.0894509f, 0.320093f, -0.131107f, 0.0902105f, -0.0887999f, -0.230315f, -0.00596288f, -0.276073f, 0.0376219f, 0.232743f, -0.0594625f, -0.107894f, 0.127644f, -0.212875f, 0.0241978f, -0.315535f, 0.276913f, -0.0530903f, 0.247042f }, -1.69973e-06f }, { { -0.0699721f, -0.266052f, -0.0695785f, -0.17495f, -0.370473f, -0.0756186f, 0.254157f, -0.311849f, -0.0580066f, -0.117593f, 0.104297f, -0.041603f, -0.00482097f, -0.141825f, 0.0267426f, 0.0633117f, 0.0725362f, 0.241823f, -0.241177f, -0.190107f, 0.0318989f, 0.0176232f, 0.219859f, 0.212894f, 0.0547184f, 0.19821f, -0.206161f, 0.188399f, -0.114998f, -0.132667f, -0.0152545f, 0.161207f, -0.281967f, 0.227276f, -0.13979f }, 0 }, { { 0.192173f, -0.0228267f, 0.375554f, -0.0364637f, 0.160019f, 0.196661f, 0.186837f, -0.18364f, -0.154038f, -0.143236f, 0.0937228f, -0.180206f, -0.0207742f, 0.170194f, -0.204732f, -0.0683147f, -0.175845f, -0.00606354f, 0.0728399f, -0.191208f, -0.0446213f, -0.123862f, -0.144296f, -0.124381f, -0.216013f, 0.231827f, 0.0837394f, -0.141167f, -0.0818422f, -0.101323f, 0.068948f, 0.0734243f, -0.0261634f, 0.0873507f, 0.0655257f }, 0 }, { { -0.128743f, -0.0901423f, 0.0508828f, -0.146875f, 0.00156753f, -0.175587f, 0.00871719f, -0.0298827f, 0.0473816f, 0.0416032f, 0.138852f, 0.0987578f, -0.225334f, 0.0704147f, -0.282594f, 0.0154425f, 0.164264f, -0.0150974f, 0.315018f, 0.15635f, -0.07873f, 0.0656561f, -0.0692066f, 0.069618f, -0.20468f, -0.302794f, -0.204259f, 0.0601373f, -0.0887546f, -0.146167f, -0.019488f, 0.0942088f, -0.25275f, 0.29721f, 0.280846f }, 0 }, { { -0.0481551f, -0.0241894f, 0.152937f, 0.264936f, -0.0753308f, -0.0074685f, -0.0799451f, -0.146977f, -0.237485f, 0.0433301f, 0.334884f, -0.118259f, 0.159778f, -0.387713f, 0.344442f, -0.0402615f, 0.335851f, 0.0996399f, 0.00746926f, 0.0551003f, 0.133106f, 0.088773f, -0.1047f, -0.162659f, 0.212376f, -0.0396916f, -0.00413355f, 0.121138f, 0.120862f, -0.101188f, -0.0826556f, 0.297681f, 0.0791785f, -0.39846f, -0.00890768f }, 0 }, { { 0.261571f, -0.0819527f, 0.159331f, -0.155317f, 0.0580831f, 0.0299634f, 0.00938191f, -0.117224f, -0.0362686f, 0.0119556f, 0.161503f, -0.0413122f, 0.249661f, 0.210621f, 0.295553f, -0.0138618f, 0.192416f, -0.16189f, -0.058654f, 0.162654f, 0.0937286f, -0.0344415f, -0.0613698f, 0.15136f, 0.0486508f, -0.118264f, -0.0368482f, -0.0773667f, 0.195519f, 0.254366f, -0.124457f, 0.00235821f, -0.214432f, 0.0573463f, 0.277033f }, 1.88996e-07f }, { { 0.227466f, -0.0328491f, -0.0979625f, 0.118205f, -0.0727879f, 0.13321f, 0.0980722f, -0.0415296f, -0.0770192f, 0.101593f, 0.36848f, -0.0456638f, -0.018499f, 0.0216724f, -0.124028f, 0.0139553f, -0.18572f, 0.000640695f, -0.0194347f, 0.144254f, 0.031358f, -0.314158f, -0.219135f, 0.223117f, -0.00359326f, -0.154404f, -0.0745729f, 0.131954f, 0.0389939f, 0.273583f, 0.00326198f, 0.0251399f, -0.0777014f, 0.365004f, 0.0083082f }, 1.10466e-06f }, { { -0.323071f, 0.360922f, 0.111512f, 0.172652f, -0.252809f, -0.233474f, 0.0471302f, -0.248473f, 0.201377f, 0.0135449f, 0.149838f, -0.309949f, -0.0885524f, 0.0243869f, 0.238997f, -0.340825f, -0.0476477f, 0.147856f, -0.128873f, -0.171533f, 0.0475866f, -0.0910984f, -0.0500081f, -0.089831f, 0.00483163f, 0.108039f, -0.0171701f, -0.0832684f, -0.0402042f, 0.144196f, -0.306899f, 0.125327f, -0.304736f, -0.188243f, -0.020188f }, 1.58759e-06f }, { { -0.0403871f, 0.0640978f, 0.205915f, -0.502953f, -0.303684f, 0.159871f, 0.410827f, -0.195625f, -0.135275f, -0.0429627f, 0.290705f, -0.194561f, 0.0186401f, -0.128643f, -0.270546f, 0.25096f, -0.189235f, -0.241413f, -0.171339f, 0.111814f, -0.0631092f, 0.316698f, 0.385707f, -0.375424f, 0.015939f, -0.0870497f, 0.31214f, -0.279452f, -0.29866f, -0.134637f, 0.0574148f, 0.0526093f, -0.146415f, -0.0541281f, -0.114517f }, 0 }, { { 0.263628f, -0.00345994f, 0.0796752f, -0.0261546f, 0.0356464f, -0.101987f, -0.155225f, -0.0212934f, 0.148739f, 0.259332f, -0.304207f, 0.0861756f, -0.179583f, -0.0149711f, 0.112194f, 0.331336f, 0.296699f, -0.0704652f, -0.0634359f, -0.132758f, 0.237872f, 0.200051f, -0.288162f, -0.0748195f, 0.0669835f, 0.130465f, 0.0228028f, 0.253767f, 0.16062f, 0.141049f, -0.0988484f, -0.128016f, -0.0470949f, 0.0147354f, 0.255166f }, 2.17669e-08f }, { { -0.299874f, -0.143072f, -0.068519f, 0.0960773f, 0.0374164f, -0.220732f, 0.0722328f, 0.145459f, 0.13621f, 0.0344996f, 0.208012f, -0.29516f, 0.165226f, -0.176695f, -0.250195f, -0.0852489f, 0.081837f, 0.0983358f, -0.125278f, 0.00800276f, -0.256196f, 0.136872f, -0.252715f, 0.0389704f, 0.0361919f, 0.0481726f, 0.337137f, 0.181426f, 0.436154f, -0.109872f, 0.281999f, 0.03084f, 0.171342f, 0.182986f, 0.0479301f }, 5.70313e-08f } }),
    NeuralLayer<35, 20, Math::Activation::Sigmoid>({ { { 0.105623f, -0.189249f, 0.0124335f, -0.0715777f, -0.262028f, 0.169055f, 0.147558f, -0.194194f, 0.0503075f, -0.0486655f, 0.0942887f, 0.19144f, 0.0960644f, -0.215609f, -0.246906f, 0.243798f, -0.0815017f, 0.17613f, 0.0729663f, -0.340416f, -0.0889251f, 0.309189f, 0.0130893f, 0.41987f, 0.183336f, 0.204819f, -0.167952f, -0.0868007f, -0.145949f, 0.409556f, 0.381819f, 0.31884f, -0.0382338f, -0.192967f, -0.141764f }, -0.0582765f }, { { -0.383588f, 0.0339271f, 0.0126088f, 0.420986f, -0.0956634f, -0.088514f, 0.0271677f, -0.0863546f, 0.0269593f, -0.0928506f, -0.199601f, -0.149147f, -0.0146135f, -0.217803f, -0.052482f, -0.00233095f, -0.123471f, 0.196444f, -0.195455f, -0.163994f, -0.0713339f, -0.316485f, -0.0719029f, 0.0344126f, -0.210782f, -0.111355f, 0.123952f, -0.109381f, 0.00516587f, -0.150234f, 0.411862f, 0.670648f, -0.109179f, -0.307433f, -0.0866825f }, -0.112491f }, { { 0.138991f, 0.0821521f, -0.273318f, 0.170038f, 0.0365086f, -0.260247f, -0.0877153f, 0.0776251f, -0.117497f, -0.0490215f, 0.3469f, -0.098015f, 0.228108f, 0.214775f, 0.0752732f, 0.219557f, 0.398295f, 0.23224f, 0.0465762f, 0.0587595f, 0.0480984f, -0.252382f, 0.243985f, -0.318459f, 0.0309471f, -0.0541783f, 0.0168898f, 0.222338f, -0.0446835f, 0.308089f, -0.126054f, -0.105575f, -0.173566f, 0.271099f, 0.164047f }, 0.0228402f }, { { 0.195435f, 0.105519f, 0.250878f, -0.158544f, -0.04627f, -0.18172f, -0.317274f, 0.217024f, -0.12145f, 0.131533f, 0.104295f, 0.0507601f, 0.277819f, -0.220861f, 0.0314525f, 0.213693f, -0.194418f, -0.239653f, -0.165581f, -0.295753f, 0.0479555f, 0.0738656f, 0.0214393f, -0.132188f, -0.278798f, 0.106874f, 0.231729f, -0.00981183f, -0.0634045f, 0.0886285f, -0.0361521f, 0.548571f, -0.402465f, -0.269943f, -0.333272f }, -0.0920785f }, { { -0.188244f, 0.142876f, 0.0587436f, 0.135538f, 0.00457084f, -0.315166f, -0.0971665f, -0.0176826f, -0.193631f, -0.343931f, 0.0999236f, 0.475774f, -0.186431f, -0.309689f, 0.233697f, -0.074597f, -0.0582181f, -0.0368826f, 0.149003f, 0.0699946f, 0.0507727f, 0.0301344f, -0.0483715f, 0.277483f, -0.0180404f, -0.174034f, -0.397632f, -0.0856143f, -0.171735f, 0.0767556f, 0.187127f, 0.2603f, 0.0321484f, -0.185031f, 0.229296f }, -0.0653519f }, { { 0.0754441f, -0.191305f, 0.157651f, -0.0349994f, 0.305664f, -0.0589102f, 0.183019f, -0.197434f, -0.129286f, 0.223433f, 0.344552f, -0.00500431f, -0.0911213f, 0.0722568f, -0.16626f, -0.299334f, 0.0907591f, 0.131067f, 0.432124f, 0.312755f, -0.0986002f, 0.0319904f, -0.259544f, -0.733004f, 0.398551f, 0.130268f, 0.252255f, 0.220434f, -0.0132639f, 0.141157f, -0.370546f, -0.761584f, 0.0550489f, 0.366064f, 0.30709f }, 0.106618f }, { { 0.0208639f, 0.194237f, 0.492429f, 0.0266415f, -0.357618f, 0.202252f, -0.3519f, -0.0621699f, -0.089812f, 0.0956946f, 0.134674f, 0.145345f, -0.170859f, 0.0241848f, -0.231108f, -0.00326904f, 0.126197f, -0.782575f, 0.339396f, -0.769247f, 0.420223f, -0.219077f, 0.052956f, -0.599608f, -0.523141f, 0.29224f, 0.0824431f, -0.012851f, -0.136965f, -0.28422f, 0.684377f, 1.032f, 0.0426439f, -0.0456815f, -0.407954f }, 0.00627089f }, { { -0.251217f, -0.0896862f, -0.168868f, 0.234252f, 0.0125929f, -0.437693f, -0.204311f, 0.150263f, 0.285213f, 0.102204f, 0.255521f, 0.0615421f, 0.0425365f, 0.463365f, -0.148632f, 0.0131403f, 0.281856f, 0.081271f, 0.0939264f, 0.421243f, -0.0706551f, -0.122455f, -0.000134713f, -0.0395142f, 0.069754f, -0.140551f, -0.191787f, -0.147678f, 0.0715712f, -0.32936f, -0.437209f, -0.65538f, -0.195711f, 0.23898f, 0.180614f }, -0.0278039f }, { { -0.35839f, 0.155364f, -0.205516f, -0.193409f, 0.151263f, -0.210976f, 0.0819057f, 0.153904f, 0.222831f, -0.194541f, 0.055813f, 0.090208f, 0.353915f, 0.273655f, 0.239789f, -0.0178798f, 0.143776f, 0.445123f, 0.22659f, 0.447413f, -0.448168f, 0.112366f, 0.0494896f, 0.0412667f, 0.688927f, -0.22781f, 0.10807f, -0.0142469f, 0.0846968f, 0.180817f, -0.924417f, -1.26565f, 0.145986f, 0.0329488f, -0.0154092f }, 0.0335039f }, { { 0.0472261f, -0.153806f, -0.155506f, -0.180205f, -0.684725f, 0.137569f, -0.368879f, -0.071477f, 0.291674f, -0.161703f, -0.0597323f, -0.379246f, -0.104436f, -0.243577f, -0.18616f, 0.0589411f, -0.461976f, -0.238203f, -0.416233f, -0.509112f, -0.0067298f, -0.000893454f, 0.0586675f, 0.313315f, -0.208232f, -0.014027f, -0.070858f, -0.252272f, -0.188238f, -0.0449054f, 0.619719f, 1.02195f, 0.088465f, 0.00849441f, -0.231729f }, -0.210957f }, { { -0.329377f, 0.0740066f, -0.0858312f, -0.307507f, -0.134837f, 0.0620066f, 0.0250599f, 0.147436f, -0.139257f, -0.0075695f, 0.162784f, 0.00518929f, -0.168879f, 0.131334f, 0.0649419f, 0.089225f, -0.114643f, -0.179976f, 0.0625599f, -0.0515478f, -0.197776f, 0.0716996f, 0.0254981f, -0.0708701f, -0.107944f, -0.073801f, 0.142696f, -0.251432f, -0.198908f, -0.0415564f, 0.105108f, 0.293525f, -0.0761504f, 0.0504499f, -0.133717f }, -0.0836929f }, { { 0.242785f, 0.0406112f, 0.267375f, -0.181971f, 0.117351f, 0.0230563f, 0.0199556f, -0.0330841f, 0.0150657f, 0.0209368f, -0.0851639f, 0.267086f, -0.191288f, 0.143065f, 0.143461f, -0.0387629f, -0.113408f, 0.0202646f, -0.126416f, 0.129645f, -0.23095f, 0.026544f, 0.283545f, 0.0341931f, 0.280575f, -0.264624f, 0.257191f, 0.0651519f, -0.105544f, 0.0670483f, -0.200152f, -0.329179f, 0.0278136f, 0.255802f, 0.0874919f }, 0.013956f }, { { -0.154293f, -0.0660657f, -0.0548046f, 0.227296f, 0.133278f, 0.0733883f, 0.106377f, 0.146635f, -0.171971f, 0.034104f, 0.144843f, 0.0141687f, 0.0471598f, 0.0894888f, -0.151183f, 0.23484f, 0.168695f, 0.19531f, 0.209623f, 0.333957f, -0.306435f, 0.255651f, -0.223638f, 0.0168037f, 0.270781f, -0.10856f, -0.0807839f, 0.149443f, 0.235108f, -0.116527f, -0.256578f, -0.471947f, -0.141783f, -0.0231724f, 0.405939f }, 0.0874675f }, { { 0.045948f, 0.0698476f, -0.00546173f, 0.0682556f, -0.227881f, -0.130171f, -0.18668f, 0.198687f, -0.191431f, -0.452135f, 0.148365f, 0.126129f, -0.124659f, -0.269812f, -0.161244f, -0.109263f, 0.0388307f, -0.264937f, -0.134223f, -0.145279f, -0.0282229f, 0.191133f, -0.0560113f, 0.368584f, -0.0514003f, 0.0969881f, -0.436258f, 0.0983132f, -0.17966f, -0.191453f, -0.0698582f, 0.108789f, -0.0163547f, 0.146002f, -0.130704f }, -0.0528349f }, { { 0.149838f, -0.221701f, 0.136911f, 0.0859666f, 0.109865f, -0.220309f, -0.123855f, 0.0939296f, 0.0709365f, 0.0431786f, 0.0855822f, 0.166021f, -0.177726f, -0.234626f, -0.0817284f, -0.0140365f, -0.3443f, -0.0700587f, -0.148153f, -0.196714f, 0.342825f, -0.0864604f, -0.300363f, 0.0732951f, 0.266262f, 0.0189728f, 0.0318679f, 0.0223644f, 0.0740098f, -0.0543902f, -0.0586777f, 0.0338695f, 0.400362f, 0.205173f, 0.0194101f }, -0.0290624f }, { { 0.264441f, 0.0384684f, 0.203768f, 0.00352405f, 0.249199f, 0.0100613f, -0.18527f, -0.187502f, 0.161535f, 0.0190867f, 0.259015f, 0.00421369f, 0.0670255f, -0.423716f, 0.284576f, 0.0755394f, 0.309713f, -0.0680051f, -0.139122f, 0.0248146f, 0.0620885f, 0.325837f, -0.0830919f, -0.326787f, 0.200488f, 0.0981981f, 0.0920725f, -0.00885987f, -0.144967f, 0.130567f, -0.525783f, -0.257022f, -0.128236f, 0.0267588f, -0.363462f }, 0.05858f }, { { 0.0385812f, -0.383125f, 0.0472585f, 0.00150436f, 0.258167f, -0.0728405f, 0.424768f, -0.189839f, -0.0242549f, 0.388149f, 0.307312f, 0.0541597f, 0.288941f, -0.129091f, 0.0379548f, 0.0338855f, 0.0136438f, 0.262391f, 0.0366201f, 0.464333f, -0.092477f, -0.200447f, -0.065392f, -0.232819f, 0.498139f, -0.144414f, 0.232965f, 0.0113722f, 0.0934657f, 0.0338191f, -0.395203f, -0.99609f, -0.279374f, -0.224575f, 0.363434f }, 0.116697f }, { { -0.0411389f, 0.0912565f, 0.133057f, -0.136142f, -0.10859f, 0.206275f, -0.0720609f, -0.12359f, 0.0495648f, -0.312132f, -0.138798f, -0.0465869f, 0.225754f, 0.169902f, 0.0400486f, 0.126745f, -0.295412f, -0.302672f, -0.128379f, -0.362671f, 0.437616f, -0.321241f, 0.194008f, 0.0187973f, -0.0196245f, 0.0280182f, -0.320077f, -0.0760083f, 0.144508f, 0.201349f, 0.0354617f, 0.402586f, 0.139088f, -0.201816f, -0.0477f }, -0.124882f }, { { -0.123859f, -0.145325f, -0.383734f, -0.176312f, 0.000370466f, 0.239609f, -0.173376f, -0.00735482f, -0.383464f, -0.264624f, 0.317739f, 0.213518f, 0.277628f, -0.12659f, -0.165915f, 0.122362f, -0.111302f, -0.247371f, 0.112175f, -0.202651f, -0.278037f, 0.431749f, 0.00483165f, 0.168945f, -0.188852f, 0.0886918f, 0.011905f, 0.000119307f, -0.394616f, 0.0241459f, 0.118566f, 0.344153f, -0.390083f, 0.0215615f, -0.00118297f }, -0.131673f }, { { 0.0457524f, 0.0766621f, -0.0853595f, -0.29924f, -0.0745487f, 0.0255037f, 0.143877f, 0.102092f, 0.0957553f, 0.205348f, -0.183212f, -0.116537f, -0.193597f, -0.16105f, 0.0320738f, 0.0485794f, -0.250741f, -0.249484f, 0.132901f, 0.136251f, -0.0563592f, 0.0556603f, 0.120837f, 0.080881f, 0.189595f, 0.0679623f, -0.0120331f, -0.0589779f, -0.0809787f, -0.425467f, -0.264152f, -0.0641284f, -0.0949729f, 0.101648f, 0.0430294f }, 0.0169305f } }),
    NeuralLayer<20, 10, Math::Activation::Sigmoid>({ { { -0.0157449f, 0.135859f, 0.27807f, -0.129746f, 0.313435f, 0.304764f, -0.0607737f, -0.0882939f, 0.150845f, -0.208591f, 0.0717384f, 0.305743f, 0.00422731f, -0.0212804f, -0.154763f, 0.0987896f, 0.250095f, -0.279818f, -0.0708821f, -0.0765093f }, 0.143238f }, { { -0.0276024f, -0.0872137f, 0.0784988f, 0.236081f, -0.108645f, 0.216958f, 0.523978f, -0.0105516f, -0.569909f, 0.0581201f, 0.0327544f, -0.161099f, 0.0175483f, 0.155993f, -0.130094f, 0.370874f, -0.217111f, 0.0495236f, -0.212963f, 0.00127223f }, 0.090227f }, { { 0.077315f, -0.257656f, 0.339986f, -0.517511f, 0.0133513f, 0.447898f, -0.169453f, 0.491359f, 0.65984f, -0.371875f, -0.104332f, 0.014143f, 0.189191f, 0.164904f, 0.372391f, -0.0801508f, 0.435409f, -0.155664f, -0.0371973f, 0.0888041f }, 0.232179f }, { { -0.165196f, -0.159454f, 0.50644f, 0.0376814f, -0.155918f, 0.721623f, -0.466333f, 0.150641f, 0.830556f, -0.464949f, -0.129607f, 0.202221f, 0.580664f, -0.329812f, -0.135765f, 0.177729f, 0.598693f, 0.129318f, 0.0533954f, -0.148015f }, 0.231723f }, { { -0.129521f, 0.108662f, -0.0207723f, -0.220631f, -0.0205295f, -0.447574f, -0.0343434f, 0.0343137f, 0.0877793f, -0.0284574f, 0.264915f, -0.271349f, 0.0670006f, -0.12681f, 0.0681742f, -0.161533f, -0.415002f, -0.0245304f, -0.215288f, 0.106387f }, -0.210379f }, { { -0.163688f, 0.0748838f, -0.121779f, 0.0961326f, -0.0253234f, 0.373783f, -0.0539184f, 0.19652f, -0.138345f, -0.186482f, 0.285546f, 0.120565f, 0.329331f, -0.188298f, -0.171483f, 0.153741f, -0.0635968f, -0.0991472f, 0.239555f, -0.0564059f }, 0.156596f }, { { -0.509335f, -0.48354f, 0.191339f, -0.406124f, 0.0209286f, 0.555091f, -1.34149f, 0.664763f, 1.19998f, -0.7872f, -0.201868f, 0.441614f, 0.544002f, -0.25922f, -0.117536f, 0.264388f, 0.8482f, -0.277472f, -0.170595f, 0.444329f }, -0.140643f }, { { -0.0255171f, -0.0840259f, 0.231256f, -0.0251564f, -0.0845256f, 0.251171f, 0.294115f, 0.200609f, -0.0431148f, -0.177055f, 0.0209258f, 0.0586749f, 0.0492813f, 0.178355f, 0.208051f, -0.107781f, 0.129135f, 0.0122685f, 0.0162397f, -0.0152939f }, 0.12298f }, { { -0.280957f, -0.191903f, 0.270513f, -0.178438f, -0.0830974f, 0.708282f, -0.610606f, 0.351638f, 0.844535f, -0.877287f, 0.20322f, 0.287357f, 0.481175f, -0.0452165f, 0.132441f, 0.740714f, 0.725819f, -0.140618f, -0.319211f, 0.267332f }, 0.217491f }, { { 0.0325356f, -0.0573384f, 0.0118063f, 0.43233f, -0.0548296f, 0.386166f, -0.186749f, 0.534891f, 0.635341f, -0.242199f, -0.230147f, 0.17774f, 0.192618f, 0.0985554f, 0.322026f, 0.365305f, 0.550106f, -0.32271f, -0.154457f, -0.249905f }, 0.282785f } }),
    NeuralLayer<10, 3, Math::Activation::Sigmoid>({ { { 0.210148f, 0.516719f, 0.200172f, 0.3417f, 0.067169f, 0.561152f, 0.744147f, 0.425042f, 0.772899f, 0.17584f }, -2.26607f }, { { 0.210549f, 0.2471f, 0.367529f, 0.453148f, 0.100055f, 0.0382692f, 0.995027f, 0.140046f, 0.474928f, 0.622853f }, -1.66574f }, { { 0.116859f, -0.732034f, 0.750422f, 0.836424f, -0.130281f, 0.072985f, 2.16247f, -0.318345f, 1.14021f, 0.296272f }, -1.63789f } }),
};

template <size_t resolution_factor>
void renderReducedResolution(const Camera& camera, Viewport viewport, const Objects& objects)
{
    auto addColour = [&](const auto& colour, const auto& ray) {
        return colour + getColour(ray, objects, 10);
    };

    for (float y = 0; y < viewport.height; y += resolution_factor) {
        for (float x = 0; x < viewport.width; x += resolution_factor) {
            constexpr size_t samples = 1;
            auto rays = getRays<samples>(x, y, viewport, camera, 0.0f);
            Rgb96 colour = std::accumulate(rays.begin(), rays.end(), Rgb96 {}, addColour) / samples;

            // gamma correction
            colour.r = Math::sqrt(colour.r);
            colour.g = Math::sqrt(colour.g);
            colour.b = Math::sqrt(colour.b);

            // apply to surrounding pixels
            for (size_t i = 0; i < resolution_factor; ++i) {
                for (size_t j = 0; j < resolution_factor; ++j) {
                    if (size_t(y) + i < viewport.height && size_t(x) + j < viewport.width) {
                        size_t index = (size_t(y) + i) * viewport.width + size_t(x) + j;
                        viewport.data[index] = colour;
                        viewport.image[index] = static_cast<Rgba>(colour);
                    }
                }
            }
        }
    }
}

void renderAccumulate(const Camera& camera, Viewport viewport, const Objects& objects, float count)
{
    auto addColour = [&](auto colour, auto& ray) {
        return colour + getColour(ray, objects, 50);
    };

    for (float y = 0; y < viewport.height; ++y) {
        for (float x = 0; x < viewport.width; ++x) {
            constexpr size_t samples = 1;
            auto rays = getRays<samples>(x, y, viewport, camera);
            Rgb96 colour = std::accumulate(rays.begin(), rays.end(), Rgb96 {}, addColour) / samples;

            // Gamma correction
            colour.r = Math::sqrt(colour.r);
            colour.g = Math::sqrt(colour.g);
            colour.b = Math::sqrt(colour.b);

            size_t index = static_cast<size_t>(y * viewport.width + x);
            Rgb96 existing_colour = viewport.data[index];

            // Accumulate the samples while preserving existing data
            colour = (existing_colour * count + colour) / (count + 1);

            viewport.data[index] = colour;
            viewport.image[index] = static_cast<Rgba>(colour);
        }
    }
}